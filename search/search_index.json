{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This wiki serves as a knowledge base for fabien-renaud-fr organization.</p>"},{"location":"aws/cicd/github/create-iam-role-for-github-oidc-provider/","title":"Create IAM role for GitHub OIDC provider","text":""},{"location":"aws/cicd/github/create-iam-role-for-github-oidc-provider/#create-iam-identity-provider-console","title":"Create IAM Identity Provider (console)","text":"<p>Follow these instructions to create and manage an IAM OIDC identity provider in the AWS Management Console [1][2].</p> <ol> <li>Open the IAM console at https://console.aws.amazon.com/iam/</li> <li>In the navigation pane, choose Identity providers, and then choose Add provider</li> <li>For Configure provider, choose OpenID Connect<ul> <li>Provider URL: <code>https://token.actions.githubusercontent.com</code></li> <li>Audience: <code>sts.amazonaws.com</code></li> </ul> </li> <li>(Optional) For Add tags, you can add key\u2013value pairs to help you identify and organize your IdPs</li> <li>When you are done choose Add provider</li> </ol>"},{"location":"aws/cicd/github/create-iam-role-for-github-oidc-provider/#create-iam-role-for-identity-federation-console","title":"Create IAM Role for identity federation (console)","text":"<ol> <li>Open the IAM console at https://console.aws.amazon.com/iam/</li> <li>In the navigation pane, choose Roles, and then choose Create role [3]</li> <li>For Trusted entity type, choose Custom trust policy. The sub format used in this trust policy sub claim match GitHub OIDC customization template defined in Setup GitHub OIDC customization template [4].</li> </ol> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n      {\n          \"Effect\": \"Allow\",\n          \"Principal\": {\n              \"Federated\": \"arn:aws:iam::&lt;account-id&gt;:oidc-provider/token.actions.githubusercontent.com\"\n          },\n          \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n          \"Condition\": {\n              \"StringEquals\": {\n                  \"token.actions.githubusercontent.com:aud\": \"sts.amazonaws.com\",\n                  \"token.actions.githubusercontent.com:sub\": \"repo:&lt;github-organization-name&gt;/&lt;github-repository-name&gt;:ref:refs/heads/master:actor:*\"\n              }\n          }\n      }\n  ]\n}\n</code></pre> <ol> <li>Choose Next</li> <li>For Add permissions, choose policies you want to attach, and then choose Next</li> <li>For Role details<ul> <li>Role name: <code>Terraform&lt;RepositoryName&gt;AssumeRole</code></li> <li>Description: <code>N/A</code></li> </ul> </li> <li>(Optional) For Add tags, you can add key\u2013value pairs to help you identify and organize your roles</li> <li>Choose Create role</li> </ol>"},{"location":"aws/cicd/github/create-iam-role-for-github-oidc-provider/#create-iam-identity-provider-cli","title":"Create IAM Identity Provider (CLI)","text":"<p>Upcoming soon!</p>"},{"location":"aws/cicd/github/create-iam-role-for-github-oidc-provider/#create-iam-role-for-identity-federation-cli","title":"Create IAM Role for identity federation (CLI)","text":"<p>Upcoming soon!</p>"},{"location":"aws/cicd/github/create-iam-role-for-github-oidc-provider/#references","title":"References","text":"<ul> <li>[1] AWS Documentation / AWS Identity and Access Management / Create an OpenID Connect (OIDC) identity provider in IAM / Creating and managing an OIDC provider (console)</li> <li>[2] GitHub Docs / Configuring OpenID Connect in Amazon Web Services / Adding the identity provider to AWS</li> <li>[3] AWS Documentation / AWS Identity and Access Management / Create a role for a third-party identity provider (federation) / Creating a role for federated users (console)</li> <li>[4] Wiki / AWS / CICD / GitHub / Setup GitHub OIDC customization template</li> </ul>"},{"location":"aws/cicd/github/setup-github-oidc-customization-template/","title":"Setup GitHub OIDC customization template","text":"<p>This page explains how to setup a custom OpenID Connect (OIDC) template hosted on GitHub to authenticate with AWS using GitHub as an identity provider.</p> <p>GitHub Actions can authenticate with AWS services using OIDC. This eliminates the need for long-lived credentials by dynamically requesting temporary credentials during workflow execution. By default, tokens generated use <code>repo:&lt;organization&gt;/&lt;repository&gt;:ref:refs/heads/&lt;branch&gt;</code> sub format, but changes to <code>repo:&lt;organization&gt;/&lt;repository&gt;:env:&lt;environment&gt;</code> when specifying workflow's environment [1].</p> <p>Following GitHub workflow customize the format of OIDC sub to <code>repo:&lt;organization&gt;/&lt;repository&gt;:ref:refs/heads/&lt;branch&gt;:actor:*</code> on selected repositories. This format enhance security by including both the <code>branch</code> and <code>actor</code> in the <code>sub</code> claim. In AWS, you can adjust the IAM role's trust policy to allow role assumption only for tokens with specific branch(es) and actor(s) [2].</p>"},{"location":"aws/cicd/github/setup-github-oidc-customization-template/#create-a-new-github-apps","title":"Create a new GitHub Apps","text":"<ol> <li>Go to your organization's <code>Settings</code> / <code>Developper settings</code> / <code>GitHub Apps</code> page and click on <code>New GitHub App</code><ul> <li>GitHub App name: <code>frd-github-organization-app</code></li> <li>Description: <code>GitHub App that perform organization related actions in GitHub Actions workflows</code></li> <li>Homepage URL: <code>https://github.com/orgs/fabien-renaud-fr</code></li> <li>Webhook: Uncheck <code>Active</code></li> <li>Permissions:<ul> <li>Repository permissions:<ul> <li>Actions: <code>Read and write</code></li> <li>Metadata: <code>Read only</code></li> </ul> </li> <li>Organization permissions:<ul> <li>Administration: <code>Read and write</code></li> </ul> </li> </ul> </li> <li>Where can this GitHub App be installed: <code>Only this account</code></li> <li>Click on <code>Create GitHub App</code></li> </ul> </li> <li>On <code>General</code> / <code>Private keys</code>, click on <code>Generate a private key</code></li> <li>On <code>Install App</code>, click on <code>Install</code><ul> <li>Select <code>All repositories</code>, or manually select repositories that you want to customize</li> <li>Click on <code>Install</code></li> </ul> </li> </ol>"},{"location":"aws/cicd/github/setup-github-oidc-customization-template/#create-a-new-github-repository","title":"Create a new GitHub repository","text":"<ul> <li>Create a new GitHub repository</li> <li>Go to your repository's <code>Settings</code> / <code>Secrets and variables</code> / <code>Actions</code><ul> <li>Click on <code>New repository secret</code>:<ul> <li>Name: <code>CI_GITHUB_APPS_&lt;GITHUB_APP_NAME&gt;_APP_ID</code></li> <li>Secret: <code>&lt;github-app-private-key&gt;</code></li> </ul> </li> <li>Click on <code>Variables</code> / <code>New repository variable</code>:<ul> <li>Name: <code>CI_SECRET_GITHUB_APPS_&lt;GITHUB_APP_NAME&gt;_PRIVATE_KEY</code></li> <li>Value: <code>&lt;github-app-id&gt;</code></li> </ul> </li> </ul> </li> <li>Create <code>.github/workflows/99-set-oidc-customization-template.yml</code> file:</li> </ul> <pre><code>name: 99. \ud83d\udd12 Set OIDC customization template\non:\n  workflow_dispatch:\n    inputs:\n      repository-name:\n        description: '(Required) The repository name'\n        required: true\n        type: string\npermissions:\n  id-token: write # This is required for requesting the JWT\njobs:\n  set-oidc-customization-template:\n    name: \ud83d\udd12 Set OIDC customization template\n    runs-on: ubuntu-22.04\n    steps:\n      - name: \ud83d\udd13 Generate token for fabien-renaud-fr GitHub Organization Agent\n        id: generate-token\n        uses: tibdex/github-app-token@v1\n        with:\n          app_id: ${{ vars.CI_GITHUB_APPS_FRD_GITHUB_ORGANIZATION_APP_APP_ID }}\n          private_key: ${{ secrets.CI_SECRET_GITHUB_APPS_FRD_GITHUB_ORGANIZATION_APP_PRIVATE_KEY }}\n\n      - name: \ud83c\udf0d Set organization-level OIDC customization template\n        uses: octokit/request-action@v2.x\n        env:\n          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}\n        with:\n          route: PUT /orgs/{org}/actions/oidc/customization/sub\n          org: fabien-renaud-fr\n          # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#configuring-the-oidc-trust-with-the-cloud\n          # environment: The name of the environment used by the job. To include the environment claim you must reference an environment\n          # ref: The git ref that triggered the workflow run\n          include_claim_keys: '[\"repository\", \"ref\", \"actor\"]' # Actor is added for audit log in CloudTrail, but is not verified in authentication process\n\n      - name: \ud83d\udea9 Set repository's OIDC customization template\n        uses: octokit/request-action@v2.x\n        env:\n          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}\n        with:\n          route: PUT /repos/{owner}/{repo}/actions/oidc/customization/sub\n          owner: fabien-renaud-fr\n          repo: ${{ inputs.repository-name }}\n          # https://github.com/aws-actions/configure-aws-credentials/issues/454#issuecomment-1299519020\n          # use_default: true means it will not use the organization's customized template.\n          use_default: false\n</code></pre>"},{"location":"aws/cicd/github/setup-github-oidc-customization-template/#references","title":"References","text":"<ul> <li>[1] GitHub Docs / Configuring OpenID Connect in Amazon Web Services / Configuring the role and trust policy</li> <li>[2] Wiki / AWS / CICD / GitHub / Create IAM role for GitHub OIDC provider</li> </ul>"},{"location":"git/useful-commands/","title":"Useful commands","text":""},{"location":"git/useful-commands/#amend","title":"Amend","text":""},{"location":"git/useful-commands/#amend-author","title":"Amend author","text":"<p>Reference: https://stackoverflow.com/a/3042512</p> <pre><code># Edit git config\ngit config --local user.name \"Fabien RENAUD\"\ngit config --local user.email \"frd.frenaud@gmail.com\"\n\n# Start rebase\ngit rebase -i --root                        # Replace pick by edit\n\n# Repeat until \"Successfully rebased and updated\"\ngit commit --amend --reset-author --no-edit\ngit rebase --continue\n\n# Overwrite commits\ngit push -f\n</code></pre>"},{"location":"mkdocs/","title":"Overview","text":"<p>I use MkDocs to manage and generate documentation for fabien-renaud-fr organization. MkDocs is a simple, static site generator specifically designed for project documentation. It uses Markdown files to create well-structured, easy-to-navigate documentation websites.</p>"},{"location":"mkdocs/#project-layout","title":"Project layout","text":"<p>This repository follows this layout:</p> <pre><code>mkdocs.yml     # The configuration file\ndocs/\n    index.md   # The documentation homepage\n    ...        # Other markdown pages, images and other files\nsite/          # Unversionned directory containing website statics build \n    index.html # The website homepage\n    ...        # Other statics files\n</code></pre>"},{"location":"mkdocs/#workflow","title":"Workflow","text":"<p>To publish new content, follows this workflow:</p> <ol> <li>Write your content in Markdown files within the <code>docs/</code> directory</li> <li>Commit and push your changes. The GitHub workflow will automatically run the <code>mkdocs gh-deploy</code> command to generate    the <code>site/</code> directory and publish it on GitHub pages</li> </ol>"},{"location":"mkdocs/#references","title":"References","text":"<ul> <li>Wiki / MkDocs / Initialize a new wiki</li> <li>(External) MkDocs / Getting Started with MkDocs</li> </ul>"},{"location":"mkdocs/initialize-a-new-wiki/","title":"Initialize a new wiki","text":"<p>This page provides a step-by-step guide to set up a new MkDocs-based wiki. It explains how to configure your project, set up CI/CD pipelines with GitHub Actions to build website, and assign a custom domain name for your documentation site.</p>"},{"location":"mkdocs/initialize-a-new-wiki/#optional-install-mkdocs","title":"(Optional) Install MkDocs","text":"<p>You can skip this part if you only want to build website using CI/CD and never run website on your own computer.</p> <p>Using Python:</p> <p>Follow official instructions here: MkDocs Installation</p> <p>Using Docker:</p> <p>You can build your own unofficial Docker image: https://github.com/fabien-renaud-fr/wiki/tree/master/docker/mkdocs</p>"},{"location":"mkdocs/initialize-a-new-wiki/#initialize-github-repository","title":"Initialize GitHub repository","text":"<ul> <li>Create a new GitHub repository</li> <li>Create <code>mkdocs.yml</code> configuration file (can be locally generated by running <code>mkdocs new &lt;site&gt;</code> command):</li> </ul> <pre><code>site_name: My Docs\n</code></pre> <ul> <li>Create <code>docs/index.md</code> file (also generated by running <code>mkdocs new &lt;site&gt;</code> command):</li> </ul> <pre><code># Welcome to MkDocs\n\nFor full documentation visit [mkdocs.org](https://www.mkdocs.org).\n\n## Commands\n\n* `mkdocs new [dir-name]` - Create a new project.\n* `mkdocs serve` - Start the live-reloading docs server.\n* `mkdocs build` - Build the documentation site.\n* `mkdocs -h` - Print help message and exit.\n\n## Project layout\n\n    mkdocs.yml    # The configuration file.\n    docs/\n        index.md  # The documentation homepage.\n        ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"mkdocs/initialize-a-new-wiki/#configure-cicd","title":"Configure CI/CD","text":"<p>To automatically publish your website, follow this procedure:</p> <ul> <li>Create <code>.github/workflows/99-build-and-publish-documentation.yml</code> file:</li> </ul> <pre><code>name: 99. \ud83d\udcd6 Build and publish documentation\non:\n  push:\njobs:\n  build-mkdocs:\n    name: \ud83d\udcd6 Build and publish documentation\n    runs-on: ubuntu-22.04\n    steps:\n      - name: \ud83d\udce5 Checkout\n        uses: actions/checkout@v4\n\n      - name: \ud83d\udc77 Setup python\n        uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n\n      - name: \ud83d\udcd6 Build and publish documentation\n        run: |\n          pip install mkdocs\n          mkdocs gh-deploy --force\n</code></pre> <ul> <li>Go to your repository's <code>Settings</code> / <code>Pages</code> / <code>Build and deployment</code> page:<ul> <li>source <code>Deploy from a branch</code></li> <li>branch: <code>gh-pages</code> <code>/ (root)</code> (this branch will be created once   <code>.github/workflows/99-build-and-publish-documentation.yml</code> file is pushed)</li> </ul> </li> </ul>"},{"location":"mkdocs/initialize-a-new-wiki/#configure-custom-domain","title":"Configure custom domain","text":"<p>To setup a custom domain on a MkDocs website published on GitHub pages, follow this procedure:</p> <ol> <li>Go to your DNS provider and create a new record:<ul> <li>type: <code>CNAME</code></li> <li>subdomain: <code>wiki.fabienrenaud.fr</code></li> <li>target: <code>fabien-renaud-fr.github.io</code> (the CNAME record should always point to &lt;user&gt;.github.io or   &lt;organization&gt;.github.io, excluding the repository name)</li> </ul> </li> <li>Create a <code>docs/CNAME</code> file that contains the subdomain on a single line</li> <li>Go to your repository's <code>Settings</code> / <code>Pages</code> / <code>Custom Domain</code> page, configure your subdomain and click on <code>Save</code></li> </ol>"},{"location":"mkdocs/initialize-a-new-wiki/#references","title":"References","text":"<ul> <li>Wiki / MkDocs / Overview</li> <li>(External) MkDocs / MkDocs Installation</li> <li>(External) MkDocs / Deploying your docs / Custom Domains</li> <li>(External) GitHub / About custom domains and GitHub Pages</li> <li>(External) GitHub / Manage a custom subdomain / Configuring a subdomain</li> </ul>"}]}